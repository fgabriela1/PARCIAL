package hotel.reservaciones;

import clases.Cifrado;
import java.text.SimpleDateFormat;
import java.util.Date;
import clases.Conectado;
import clases.Usuario;
import clases.Reservacion;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.nio.file.Files;
//import static java.lang.Math.random;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Random;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ordenamiento.OrdenIdASC;
import ordenamiento.OrdenIdDESC;
import ordenamiento.OrdenUsuarioNombreASC;
import ordenamiento.OrdenUsuarioNombreDESC;


public class FormReservacion extends javax.swing.JFrame {

    //CONSTRUCTOR
    //Conectado oCon;
    ArrayList<Usuario> lUser;
    DefaultTableModel modeloMaestro; //USUARIO
    DefaultTableModel modeloDetalle; //RESERVACION
    Double costoTotal = 0.0;
    Usuario lastSelectedUser = null; // Variable para mantener el √∫ltimo usuario seleccionado
    
    
    public FormReservacion() {
        initComponents();
    
        // Inicializar la lista de usuarios y sus reservaciones
        lUser = new ArrayList<>();

        // Inicializar los modelos de las tablas
        modeloMaestro = (DefaultTableModel) this.jTable_usuario.getModel(); 
        modeloDetalle = (DefaultTableModel) this.jTable_reservacion.getModel();

        // M√©todo para recargar las tablas con los datos existentes
        this.recargarTablaUsuario();
        this.recargarTablaReservacion();  // Recargar tambi√©n la tabla de reservaciones
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_reservacion = new javax.swing.JTable();
        btn_agregar = new javax.swing.JButton();
        jSpinner_guests = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jSpinner_beds = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jSpinner_bedrooms = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jComboBox_type = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_price = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBox_host = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        btn_total = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_usuario = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        lbl_total = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lbl_total1 = new javax.swing.JLabel();
        txt_buscar = new javax.swing.JTextField();
        jCheckBox_yes = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        btn_buscar = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        btn_ordernombreASC = new javax.swing.JButton();
        btn_ordernombreDESC = new javax.swing.JButton();
        btn_orderIdASC = new javax.swing.JButton();
        btn_orderIdDESC = new javax.swing.JButton();
        btn_exportarCSV = new javax.swing.JButton();
        btn_importarCSV = new javax.swing.JButton();
        btn_exportarHTML = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Odenarfechainicio = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        BtnDesencript = new javax.swing.JButton();
        BtnEncript = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 0));

        jTable_reservacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo de Habitacion", "Cliente", "Camas", "Tipo de Propiedad", "Habitaciones", "Idioma ", "Fecha Inicio", "Fecha Fin", "Precio"
            }
        ));
        jScrollPane1.setViewportView(jTable_reservacion);

        btn_agregar.setText("Agregar");
        btn_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregarActionPerformed(evt);
            }
        });

        jSpinner_guests.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));

        jLabel1.setText("Ingrese la identificacion del usuario:");

        jSpinner_beds.setModel(new javax.swing.SpinnerNumberModel(0, 0, 6, 1));

        jLabel2.setText("Camas");

        jSpinner_bedrooms.setModel(new javax.swing.SpinnerNumberModel(0, 0, 6, 1));

        jLabel3.setText("Habitaciones");

        jComboBox_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Casa", "Apartamento", "Hotel" }));
        jComboBox_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_typeActionPerformed(evt);
            }
        });

        jLabel4.setText("Tipo de propiedad");

        jLabel5.setText("Precio:");

        jLabel6.setText("Lenguaje del Huespeded");

        jComboBox_host.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Espa√±ol", "Franc√©s", "Ingl√©s", "Alem√°n" }));

        jLabel7.setText("Huespedes");

        btn_total.setText("Total");
        btn_total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_totalActionPerformed(evt);
            }
        });

        jLabel8.setText("Ingrese el nombre del usuario:");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Detalle: Informacion de la reservacion");

        jTable_usuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Codigo de Habitacion"
            }
        ));
        jTable_usuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_usuarioMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_usuario);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Maestro: Usuarios registrados");

        jLabel11.setText("Fecha Inicio:");

        jLabel12.setText("Fecha Fin:");

        lbl_total.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Ingrese Datos");

        lbl_total1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbl_total1.setText("$");

        jCheckBox_yes.setText("SI");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setText("Buscar");

        btn_buscar.setText("Buscar");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel18.setText("Total:");

        btn_ordernombreASC.setText("Ordenar por nombre ü°°");
        btn_ordernombreASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ordernombreASCActionPerformed(evt);
            }
        });

        btn_ordernombreDESC.setText("Ordenar por nombre ü°£");
        btn_ordernombreDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ordernombreDESCActionPerformed(evt);
            }
        });

        btn_orderIdASC.setText("Ordenar ID ü°°");
        btn_orderIdASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_orderIdASCActionPerformed(evt);
            }
        });

        btn_orderIdDESC.setText("Ordenar ID ü°£");
        btn_orderIdDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_orderIdDESCActionPerformed(evt);
            }
        });

        btn_exportarCSV.setText("Exportar CSV");
        btn_exportarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exportarCSVActionPerformed(evt);
            }
        });

        btn_importarCSV.setText("Importar CSV");
        btn_importarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_importarCSVActionPerformed(evt);
            }
        });

        btn_exportarHTML.setText("Exportar HTML");
        btn_exportarHTML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exportarHTMLActionPerformed(evt);
            }
        });

        jButton1.setLabel("Ordenar Fecha Inicio ü°°");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Odenarfechainicio.setText("Ordenar Fecha Inicio ü°£");

        BtnDesencript.setText("Desencriptar");
        BtnDesencript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDesencriptActionPerformed(evt);
            }
        });

        BtnEncript.setText("Encriptar");
        BtnEncript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEncriptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 1213, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(267, 267, 267)
                                .addComponent(lbl_total))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btn_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel16)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jCheckBox_yes, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_buscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(txt_price)
                                    .addComponent(txt_nombre, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(btn_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jSpinner_guests, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbl_total1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jComboBox_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jComboBox_host, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jSpinner_beds)
                                                    .addComponent(jSpinner_bedrooms))
                                                .addGap(69, 69, 69)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(BtnEncript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(BtnDesencript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btn_orderIdDESC, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(btn_exportarHTML, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(Odenarfechainicio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btn_ordernombreASC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btn_exportarCSV, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btn_importarCSV, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addComponent(btn_ordernombreDESC, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(btn_orderIdASC, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(103, 103, 103)
                                                .addComponent(btn_total, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel14)
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jSpinner_guests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jSpinner_bedrooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(7, 7, 7)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel11)
                                .addComponent(jSpinner_beds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2))
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jDateChooser2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(txt_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox_host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_total)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(jCheckBox_yes)
                            .addComponent(jLabel18)
                            .addComponent(lbl_total1)
                            .addComponent(btn_agregar))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_buscar)
                            .addComponent(btn_total))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtnEncript)
                            .addComponent(btn_ordernombreDESC))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtnDesencript)
                            .addComponent(btn_ordernombreASC))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Odenarfechainicio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_exportarHTML)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_exportarCSV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_importarCSV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_orderIdDESC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_orderIdASC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        Odenarfechainicio.getAccessibleContext().setAccessibleName("Ordenar Fecha Inicio");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //BOTON AGREGAR
    private void btn_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregarActionPerformed
        //ESTE ES PARA EL CODIGO DE HABITACION
        Random random = new Random();
        
        
        //DATOS DEL USUARIO
        int identificacion = Integer.parseInt(this.jFormattedTextField1.getText());
        String nombre = this.txt_nombre.getText().trim().toUpperCase();
        //GENERAR NUMERO ALEATORIO ENTRE 100 Y 1099
        int codigo_habitacion = random.nextInt(1000) + 100;
        
        //DATOS DE RESERVACION
        int guests = (int) this.jSpinner_guests.getValue();
        int bedrooms = (int) this.jSpinner_bedrooms.getValue();
        String property_type = this.jComboBox_type.getSelectedItem().toString();
        int beds = (int) this.jSpinner_beds.getValue();
        String host_language = this.jComboBox_host.getSelectedItem().toString();
    
        // OBTENER FECHAS DESDE JDateChooser
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String fechaInicio = dateFormat.format(this.jDateChooser1.getDate());
        String fechaFin = dateFormat.format(this.jDateChooser2.getDate());
        
        Double precio = Double.parseDouble(this.txt_price.getText());
    
        // C√≥digo para agregar un nuevo usuario a la lista
        Usuario nuevoUsuario = new Usuario(identificacion, nombre, codigo_habitacion);
        lUser.add(nuevoUsuario);
    
        // Crear y agregar una nueva reserva para el usuario reci√©n agregado
        Reservacion nuevaReserva = new Reservacion(codigo_habitacion, guests, bedrooms, 
                                                   property_type, beds, host_language, fechaInicio, fechaFin, precio);
        nuevoUsuario.lReservacion.add(nuevaReserva);
    
        // LIMPIEZA DE CAMPOS
        this.jFormattedTextField1.setText("");
        this.txt_nombre.setText("");
        this.jSpinner_guests.setValue(0); 
        this.jSpinner_bedrooms.setValue(0); 
        this.jComboBox_type.setSelectedItem(null);
        this.jSpinner_beds.setValue(0); 
        this.jComboBox_host.setSelectedItem(null);
        this.jDateChooser1.setDate(null); // Limpiar la selecci√≥n de la fecha
        this.jDateChooser2.setDate(null); // Limpiar la selecci√≥n de la fecha
        this.txt_price.setText("");
               
        //RECARGAR LA TABLA.
        this.recargarTablaUsuario();
    }//GEN-LAST:event_btn_agregarActionPerformed
    
    //METODO PARA RECARGAR LA TABLA
    //CADA VEZ QUE ES INGRESADO UN NUEVO USUARIO
    private void recargarTablaUsuario() 
   {
        // Limpiar el contenido actual de la tabla de usuarios
        modeloMaestro.setRowCount(0); 
        for (Usuario usuario : lUser) {
            // Construir una representaci√≥n de las reservaciones para mostrar en la columna del usuario
            StringBuilder lReservacionToString = new StringBuilder();
            for (Reservacion reservacion : usuario.lReservacion) {
                lReservacionToString.append("[").append(reservacion.identificacion).append(", ").append(reservacion.precio).append("], ");
            }

            // Crear un array con los datos del usuario para agregar a la tabla de usuarios
            String[] datosUsuario = {
                Integer.toString(usuario.identificacion),
                usuario.nombre,
                Integer.toString(usuario.codigo_habitacion),
                lReservacionToString.toString()
            };
            modeloMaestro.addRow(datosUsuario);
        }
    }
    
    //METODO PARA RECARGAR LA TABLA POR PRECIOS PARA ORDENAR ASC OR DESC
    private void recargarTablaCosto()
    {
        this.modeloDetalle.setRowCount(0); 
        for(Usuario user : lUser)
        {
            ArrayList<Reservacion> reservaciones = user.lReservacion;
            for(Reservacion reservacion : reservaciones)
            {
                String[] datosReservacion = 
                {
                    Integer.toString(reservacion.identificacion), 
                    Integer.toString(reservacion.guests),
                    Integer.toString(reservacion.bedrooms),
                    String.valueOf(reservacion.property_type),
                    Integer.toString(reservacion.beds),
                    String.valueOf(reservacion.host_language),
                    String.valueOf(reservacion.fechaInicio),
                    String.valueOf(reservacion.fechaFin),
                    Double.toString(reservacion.precio),           
                };
                modeloDetalle.addRow(datosReservacion);  
            }         
        }
    }
    
    private void recargarTablaa() 
    {
        int indiceusuario = this.jTable_usuario.getSelectedRow();
        this.modeloDetalle.setRowCount(0);

        for(int i=0; i<this.lUser.get(indiceusuario).lReservacion.size(); i++)
        {
            String[] registroo = {Integer.toString(this.lUser.get(indiceusuario).lReservacion.get(i).identificacion),
                                 Integer.toString(this.lUser.get(indiceusuario).lReservacion.get(i).guests),
                                 Integer.toString(this.lUser.get(indiceusuario).lReservacion.get(i).bedrooms),
                                 this.lUser.get(indiceusuario).lReservacion.get(i).property_type,
                                 Integer.toString(this.lUser.get(indiceusuario).lReservacion.get(i).beds),
                                 this.lUser.get(indiceusuario).lReservacion.get(i).host_language,
                                 this.lUser.get(indiceusuario).lReservacion.get(i).fechaInicio,
                                 this.lUser.get(indiceusuario).lReservacion.get(i).fechaFin,
                                 Double.toString(this.lUser.get(indiceusuario).lReservacion.get(i).precio),
                                 
                                 };
            modeloDetalle.addRow(registroo);  
        }
    }
    
    
    //METODO PARA MOSTRAR LAS RESERVACIONES POR CADA USUARIO
    private void mostrareservacion() {
    int selectedRow = jTable_usuario.getSelectedRow(); // Obtener la fila seleccionada en la tabla

    if (selectedRow >= 0) {
        Usuario selectedUser = lUser.get(selectedRow); // Obtener el usuario correspondiente a la fila seleccionada

        for (Reservacion reservacion : selectedUser.lReservacion) {
            boolean existe = false;

            // Verificar si la reservaci√≥n ya est√° en la tabla
            for (int i = 0; i < modeloDetalle.getRowCount(); i++) {
                if (modeloDetalle.getValueAt(i, 0).equals(String.valueOf(reservacion.identificacion))) {
                    existe = true;
                    break;
                }
            }

            if (!existe) {
                String[] datosReservacion = {
                    String.valueOf(reservacion.identificacion),
                    String.valueOf(reservacion.guests),
                    String.valueOf(reservacion.bedrooms),
                    reservacion.property_type,
                    String.valueOf(reservacion.beds),
                    reservacion.host_language,
                    reservacion.fechaInicio,
                    reservacion.fechaFin,
                    String.format("%.2f", reservacion.precio) // Formatear el precio a dos decimales
                };
                modeloDetalle.addRow(datosReservacion); // Agregar la fila de reservaci√≥n a la tabla
            }
        }
    }
}
    

    

    //BOTON PARA TOTALIZAR TODAS LAS RESERVACIONES.

    private void btn_totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_totalActionPerformed
          // Reiniciar el costo total a cero
    double costoTotal = 0;

    // Calcular el costo total de todas las reservaciones
    for (Usuario usuario : lUser) {
        for (Reservacion reservacion : usuario.lReservacion) {
            costoTotal += reservacion.precio;
        }
    }

    // Actualizar la etiqueta con el costo total
    lbl_total1.setText(String.valueOf("$" + costoTotal));
    }//GEN-LAST:event_btn_totalActionPerformed

    private void jComboBox_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_typeActionPerformed

    //EVENTO PARA LA TABLA MAESTRO
    private void jTable_usuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_usuarioMouseClicked
        this.mostrareservacion();
        
        /*int indicepro = jTable_usuario.getSelectedRow();
        this.lUser.get(indicepro).lReservacion.clear();
         ArrayList<Object[]> reservacion= 
                       this.oCon.consultar("SELECT identificacion, guests, bedrooms, property_type, "
                                           + "beds, host_language, fechaInicio, fechaFin, "
                                           + "precio FROM Reservacion");
               
               for (Object[] datoReservacion : reservacion)
               {
                    int idReservacion = ((BigDecimal) datoReservacion[0]).intValue();
                    int guests = ((BigDecimal) datoReservacion[1]).intValue();
                    int bedrooms = ((BigDecimal) datoReservacion[2]).intValue();
                    String property_type = datoReservacion[3].toString();
                    int beds = ((BigDecimal) datoReservacion[4]).intValue();
                    String host_language = datoReservacion[5].toString();
                    String fechaInicio = datoReservacion[6].toString();
                    String fechaFin = datoReservacion[7].toString();
                    double precio = ((BigDecimal) datoReservacion[8]).doubleValue();
                   
                   Reservacion nuevareservacion = new Reservacion(idReservacion, guests, bedrooms, 
                                                              property_type, beds, host_language, 
                                                              fechaInicio, fechaFin, precio);
                    this.lUser.get(indicepro).lReservacion.add(nuevareservacion);
               }
               this.recargarTablaa(); */

        //this.mostrareservacion(lastSelectedUser);
    }//GEN-LAST:event_jTable_usuarioMouseClicked
    
   
    //BOTON PARA BUSCAR USUARIO CON SU RESERVACION
    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        if (jCheckBox_yes.isSelected())
        {
            String usuarioBuscado = txt_buscar.getText();
            for(Usuario usuario : lUser)
            {
                if(usuario.nombre.equalsIgnoreCase(usuarioBuscado))
                {
                   String[] datosUsuario = 
                    {
                        Integer.toString(usuario.identificacion),
                        usuario.nombre,
                        Integer.toString(usuario.codigo_habitacion),
                    };
                   modeloMaestro.setRowCount(0);
                   modeloMaestro.addRow(datosUsuario);
                   modeloDetalle.setRowCount(0);
                   
                   for(Reservacion reservacion : usuario.lReservacion)
                   {
                        String[] datosReservacion = 
                        {
                            String.valueOf(reservacion.identificacion),
                            String.valueOf(reservacion.guests),
                            String.valueOf(reservacion.bedrooms),
                            reservacion.property_type,
                            String.valueOf(reservacion.beds),
                            reservacion.host_language,
                            reservacion.fechaInicio,
                            reservacion.fechaFin,
                            String.valueOf(reservacion.precio)
                        };
                        modeloDetalle.addRow(datosReservacion);
                    }
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Por favor marque la casilla " + "SI"  
                                               + " para que realizace una b√∫squeda.");
        }
        this.jCheckBox_yes.setSelected(false);
        this.txt_buscar.setText("");
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void btn_ordernombreASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ordernombreASCActionPerformed
        OrdenUsuarioNombreASC ONA = new OrdenUsuarioNombreASC();
        this.lUser.sort(ONA);
        this.recargarTablaUsuario();
    }//GEN-LAST:event_btn_ordernombreASCActionPerformed

    private void btn_ordernombreDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ordernombreDESCActionPerformed
        OrdenUsuarioNombreDESC OND = new OrdenUsuarioNombreDESC();
        this.lUser.sort(OND);
        this.recargarTablaUsuario();
    }//GEN-LAST:event_btn_ordernombreDESCActionPerformed

    private void btn_orderIdASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_orderIdASCActionPerformed
        //OrdenCostoASC ONA = new OrdenCostoASC();
        //for (Usuario user : lUser)
        //{
            //user.lReservacion.sort(ONA);
            //}
        //this.recargarTablaCosto();

        OrdenIdASC ONA = new OrdenIdASC();
        this.lUser.sort(ONA);
        this.recargarTablaUsuario();
    }//GEN-LAST:event_btn_orderIdASCActionPerformed

    private void btn_orderIdDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_orderIdDESCActionPerformed
        //OrdenCostoDESC OND = new OrdenCostoDESC();
        //for (Usuario user : lUser)
        //{
            //user.lReservacion.sort(OND);
            //}
        //this.recargarTablaCosto();

        OrdenIdDESC OND = new OrdenIdDESC();
        this.lUser.sort(OND);
        this.recargarTablaUsuario();
    }//GEN-LAST:event_btn_orderIdDESCActionPerformed

    private void btn_exportarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exportarCSVActionPerformed
        try (PrintWriter writer = new PrintWriter(new FileWriter("probando.csv"))) {
        // Generar el contenido del CSV con los datos de usuarios y reservaciones
        for (Usuario user : lUser) {
            writer.println("+," + user.identificacion + "," + user.nombre + "," + user.codigo_habitacion);
            for (Reservacion reservacion : user.lReservacion) {
                writer.println("-," + reservacion.identificacion + "," + reservacion.guests + "," + reservacion.bedrooms + "," +
                               reservacion.property_type + "," + reservacion.beds + "," + reservacion.host_language + "," +
                               reservacion.fechaInicio + "," + reservacion.fechaFin + "," + reservacion.precio);
            }
        }
        JOptionPane.showMessageDialog(null, "Archivo CSV creado con √©xito.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "ERROR al crear el archivo CSV.");
        }
    }//GEN-LAST:event_btn_exportarCSVActionPerformed

    private void btn_importarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_importarCSVActionPerformed
        // Limpiar las listas antes de importar nuevos datos
        lUser.clear();
        // Limpiar los datos de reservaciones en los usuarios existentes
        for (Usuario user : lUser)
        {
            user.lReservacion.clear();
        }

        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = fileChooser.getSelectedFile();
            //importarDesdeCSV(selectedFile);
        }
        try (BufferedReader reader = new BufferedReader(new FileReader("probando.csv")))
        {
            String line;
            Usuario currentUser = null;

            while ((line = reader.readLine()) != null)
            {
                String[] parts = line.split(",");
                String tipo = parts[0];

                if ("+".equals(tipo))
                {
                    int identificacion = Integer.parseInt(parts[1]);
                    String nombre = parts[2];
                    int codigo_habitacion = Integer.parseInt(parts[3]);
                    currentUser = new Usuario(identificacion, nombre, codigo_habitacion);
                    lUser.add(currentUser);
                }
                else if ("-".equals(tipo))
                {
                    int identificacion = Integer.parseInt(parts[1]);
                    int guests = Integer.parseInt(parts[2]);
                    int bedrooms = Integer.parseInt(parts[3]);
                    String property_type = parts[4];
                    int beds = Integer.parseInt(parts[5]);
                    String host_language = parts[6];
                    String fechaInicio = parts[7];
                    String fechaFin = parts[8];
                    double precio = Double.parseDouble(parts[9]);

                    if (currentUser != null)
                    {
                        currentUser.lReservacion.add(new Reservacion(identificacion, guests, bedrooms, property_type, beds,
                            host_language, fechaInicio, fechaFin, precio));
                }
            }
        }
        JOptionPane.showMessageDialog(null, "Archivo CSV importado con √©xito.");
        this.recargarTablaUsuario();
        this.recargarTablaCosto();

        }
        catch (Exception e)
        {
            //e.printStackTrace();
            JOptionPane.showMessageDialog(null, "ERROR.");
        }
    }//GEN-LAST:event_btn_importarCSVActionPerformed

    private void btn_exportarHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exportarHTMLActionPerformed
        String filePath = "D:\\Users\\charl\\NetBeansProjects\\Hotel-ReservacionesPaty\\probando.html";
        

        try (PrintWriter pw = new PrintWriter(new File(filePath))) { // try-with-resources para cerrar el PrintWriter autom√°ticamente
            // ARMAR EL ARCHIVO HTML.
            StringBuilder strLinea = new StringBuilder();
            strLinea.append("<html><body>");

            // Tabla para los registros maestros
            strLinea.append("<table border='2'>");
            strLinea.append("<thead><tr><th colspan='3'>Tabla Maestro</th></tr></thead>");
            strLinea.append("<tr><th>ID</th><th>Nombre</th><th>CodigoHabitacion</th></tr>");

            for (Usuario user : lUser) {
                strLinea.append("<tr>");
                strLinea.append("<td>").append(user.identificacion).append("</td>");
                strLinea.append("<td>").append(user.nombre).append("</td>");
                strLinea.append("<td>").append(user.codigo_habitacion).append("</td>");
                strLinea.append("</tr>");
            }
            strLinea.append("</table>");

            // Tabla para los detalles de reservaci√≥n
            strLinea.append("<br><table border='2'>");
            strLinea.append("<thead><tr><th colspan='9'>Tabla Detalle</th></tr></thead>");
            strLinea.append("<tr><th>ID Reservaci√≥n</th><th>Hu√©spedes</th><th>Habitaciones</th>")
                    .append("<th>PropertyType</th><th>Beds</th><th>HostLanguage</th><th>FechaInicio</th>")
                    .append("<th>FechaFin</th><th>Precio</th></tr>");

            for (Usuario user : lUser) {
                for (Reservacion reservacion : user.lReservacion) {
                    strLinea.append("<tr>");
                    strLinea.append("<td>").append(reservacion.identificacion).append("</td>");
                    strLinea.append("<td>").append(reservacion.guests).append("</td>");
                    strLinea.append("<td>").append(reservacion.bedrooms).append("</td>");
                    strLinea.append("<td>").append(reservacion.property_type).append("</td>");
                    strLinea.append("<td>").append(reservacion.beds).append("</td>");
                    strLinea.append("<td>").append(reservacion.host_language).append("</td>");
                    strLinea.append("<td>").append(reservacion.fechaInicio).append("</td>");
                    strLinea.append("<td>").append(reservacion.fechaFin).append("</td>");
                    strLinea.append("<td>").append(String.format("%.2f", reservacion.precio)).append("</td>");
                    strLinea.append("</tr>");
                }
            }
            strLinea.append("</table>");

            strLinea.append("</body></html>");
            pw.write(strLinea.toString());
            JOptionPane.showMessageDialog(null, "Archivo HTML creado con √©xito.");
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "No se pudo encontrar o crear el archivo: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERROR: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_exportarHTMLActionPerformed

    // M√©todo para limpiar el modelo de la tabla
private void limpiarTablaReservacion() {
    modeloDetalle.setRowCount(0); // Limpia todas las filas del modelo
}
// M√©todo para recargar la tabla de reservaciones
    private void recargarTablaReservacion() {
        // Limpiar el contenido actual de la tabla de reservaciones
        modeloDetalle.setRowCount(0);

        // Recorrer todos los usuarios y agregar sus reservaciones a la tabla de reservaciones
        for (Usuario usuario : lUser) {
            for (Reservacion reservacion : usuario.lReservacion) {
                String[] datosReservacion = {
                    Integer.toString(reservacion.identificacion),
                    Integer.toString(reservacion.guests),
                    Integer.toString(reservacion.bedrooms),
                    reservacion.property_type,
                    Integer.toString(reservacion.beds),
                    reservacion.host_language,
                    reservacion.fechaInicio,
                    reservacion.fechaFin,
                    Double.toString(reservacion.precio)
                };
                modeloDetalle.addRow(datosReservacion);
            }
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed

    private void BtnEncriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEncriptActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccione un archivo CSV para encriptar");
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                // Leer el contenido del archivo CSV seleccionado
                String contenido = new String(Files.readAllBytes(selectedFile.toPath()), "UTF-8");

                // Usar la clave predefinida "hola" para encriptar
                String clave = "hola";
                byte[] iv = Cifrado.generarIV();
                Cifrado cifrado = new Cifrado(clave, iv);

                // Encriptar el contenido
                String contenidoEncriptado = cifrado.encriptar(contenido);

                // Guardar el archivo encriptado
                try (PrintWriter writer = new PrintWriter(new FileWriter(selectedFile.getParent() + "/archivo_encriptado.csv"))) {
                    writer.println(Base64.getEncoder().encodeToString(iv)); // Guardar IV en la primera l√≠nea
                    writer.println(contenidoEncriptado); // Guardar el contenido encriptado
                    JOptionPane.showMessageDialog(null, "Archivo encriptado creado con √©xito.");
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al encriptar el archivo.");
            }
        }
    }//GEN-LAST:event_BtnEncriptActionPerformed

    private void BtnDesencriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDesencriptActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccione un archivo encriptado para desencriptar");
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            try {
                // Leer el contenido del archivo encriptado
                List<String> lines = Files.readAllLines(selectedFile.toPath());

                // Verificar que el archivo tenga al menos dos l√≠neas (IV + contenido encriptado)
                if (lines == null || lines.size() < 2) {
                    JOptionPane.showMessageDialog(this, "El archivo seleccionado est√° vac√≠o o no tiene el formato esperado.");
                    return;
                }

                // Extraer el IV de la primera l√≠nea
                String ivString = lines.get(0).trim();  // Eliminar espacios y saltos de l√≠nea
                byte[] iv = Base64.getDecoder().decode(ivString);  // Convertir el IV a bytes

                // Concatenar el contenido encriptado desde la segunda l√≠nea
                StringBuilder contenidoEncriptado = new StringBuilder();
                for (int i = 1; i < lines.size(); i++) {
                    contenidoEncriptado.append(lines.get(i).trim());  // Eliminar espacios y saltos de l√≠nea
                }

                // Desencriptar el contenido usando la clave predefinida "hola"
                String clave = "hola";
                Cifrado cifrado = new Cifrado(clave, iv);

                // Desencriptar el contenido y retornarlo como String
                String contenidoDesencriptado = cifrado.desencriptar(contenidoEncriptado.toString());

                // Mostrar el contenido desencriptado en la consola para ver su estructura (opcional)
                System.out.println("Contenido Desencriptado:\n" + contenidoDesencriptado);

                // Cargar el contenido en las tablas de la interfaz
                cargarDatosEnTabla(contenidoDesencriptado); // M√©todo para procesar el contenido y cargarlo en el Grid

            } catch (IllegalArgumentException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "El IV o el contenido del archivo est√° corrupto o no es v√°lido.");
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al desencriptar el archivo.");
            }
        }
    }//GEN-LAST:event_BtnDesencriptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormReservacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormReservacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormReservacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormReservacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormReservacion().setVisible(true);
            }
        });
    }
    
    private void cargarDatosEnTabla(String contenidoDesencriptado) {
        // Limpiar las tablas antes de cargar nuevos datos
        DefaultTableModel modeloUsuario = (DefaultTableModel) jTable_usuario.getModel();
        DefaultTableModel modeloReservacion = (DefaultTableModel) jTable_reservacion.getModel();
        modeloUsuario.setRowCount(0);
        modeloReservacion.setRowCount(0);

        // Procesar el contenido desencriptado l√≠nea por l√≠nea
        String[] lineas = contenidoDesencriptado.split("\n");
        Usuario currentUser = null;

        for (String linea : lineas) {
            String[] partes = linea.split(",");
            if (partes[0].equals("+")) {
                // Datos del usuario
                int identificacion = Integer.parseInt(partes[1]);
                String nombre = partes[2];
                int codigo_habitacion = Integer.parseInt(partes[3]);

                // Crear nuevo usuario
                currentUser = new Usuario(identificacion, nombre, codigo_habitacion);
                lUser.add(currentUser);

                // Agregar fila a la tabla de usuarios
                modeloUsuario.addRow(new Object[]{identificacion, nombre, codigo_habitacion});
            } else if (partes[0].equals("-") && currentUser != null) {
                // Datos de la reservaci√≥n
                int identificacion = Integer.parseInt(partes[1]);
                int guests = Integer.parseInt(partes[2]);
                int bedrooms = Integer.parseInt(partes[3]);
                String property_type = partes[4];
                int beds = Integer.parseInt(partes[5]);
                String host_language = partes[6];
                String fechaInicio = partes[7];
                String fechaFin = partes[8];
                double precio = Double.parseDouble(partes[9]);

                // Crear nueva reservaci√≥n y agregarla al usuario actual
                Reservacion reservacion = new Reservacion(identificacion, guests, bedrooms, property_type, beds, host_language, fechaInicio, fechaFin, precio);
                currentUser.lReservacion.add(reservacion);

                // Agregar fila a la tabla de reservaciones
                modeloReservacion.addRow(new Object[]{identificacion, guests, bedrooms, property_type, beds, host_language, fechaInicio, fechaFin, precio});
            }
        }

        // Refrescar las tablas para mostrar los nuevos datos
        jTable_usuario.revalidate();
        jTable_reservacion.revalidate();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnDesencript;
    private javax.swing.JButton BtnEncript;
    private javax.swing.JButton Odenarfechainicio;
    private javax.swing.JButton btn_agregar;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_exportarCSV;
    private javax.swing.JButton btn_exportarHTML;
    private javax.swing.JButton btn_importarCSV;
    private javax.swing.JButton btn_orderIdASC;
    private javax.swing.JButton btn_orderIdDESC;
    private javax.swing.JButton btn_ordernombreASC;
    private javax.swing.JButton btn_ordernombreDESC;
    private javax.swing.JButton btn_total;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox_yes;
    private javax.swing.JComboBox<String> jComboBox_host;
    private javax.swing.JComboBox<String> jComboBox_type;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner_bedrooms;
    private javax.swing.JSpinner jSpinner_beds;
    private javax.swing.JSpinner jSpinner_guests;
    private javax.swing.JTable jTable_reservacion;
    private javax.swing.JTable jTable_usuario;
    private javax.swing.JLabel lbl_total;
    private javax.swing.JLabel lbl_total1;
    private javax.swing.JTextField txt_buscar;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_price;
    // End of variables declaration//GEN-END:variables
}
